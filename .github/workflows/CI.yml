name: CI

on: [push]

jobs:
  ubuntu_bionic:
    name: Ubuntu Bionic
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: Ubuntu Bionic
        run: |
          docker build -f ubuntu/bionic/Dockerfile -t baijunyao/ubuntu:bionic ubuntu/bionic/
          docker tag baijunyao/ubuntu:bionic registry.cn-beijing.aliyuncs.com/baijunyao/ubuntu:bionic
          docker push baijunyao/ubuntu:bionic
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/ubuntu:bionic

  ubuntu_focal:
    name: Ubuntu Focal
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: Ubuntu Focal
        run: |
          docker build -f ubuntu/focal/Dockerfile -t baijunyao/ubuntu:focal ubuntu/focal/
          docker tag baijunyao/ubuntu:focal registry.cn-beijing.aliyuncs.com/baijunyao/ubuntu:focal
          docker push baijunyao/ubuntu:focal
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/ubuntu:focal

  busybox:
    name: BusyBox
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: BusyBox 1.32
        run: |
          docker build -f busybox/1.32/Dockerfile -t baijunyao/busybox:1.32 busybox/1.32/
          docker tag baijunyao/busybox:1.32 registry.cn-beijing.aliyuncs.com/baijunyao/busybox:1.32
          docker push baijunyao/busybox:1.32
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/busybox:1.32

  alpine:
    name: Alpine
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: Alpine 3.12
        run: |
          docker build -f alpine/3.12/Dockerfile -t baijunyao/alpine:3.12 alpine/3.12/
          docker tag baijunyao/alpine:3.12 registry.cn-beijing.aliyuncs.com/baijunyao/alpine:3.12
          docker push baijunyao/alpine:3.12
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/alpine:3.12

  mysql-client:
    name: MySQL Client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: MySQL Client
        run: |
          docker build -f mysql-client/1.1/Dockerfile -t baijunyao/mysql-client:1.1 mysql-client/1.1/
          docker tag baijunyao/mysql-client:1.1 registry.cn-beijing.aliyuncs.com/baijunyao/mysql-client:1.1
          docker push baijunyao/mysql-client:1.1
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/mysql-client:1.1

  nginx:
    strategy:
      matrix:
        version: [ "1.19", "1.29" ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: NGINX ${{ matrix.version }}
        run: |
          docker build -f nginx/Dockerfile -t baijunyao/nginx:${{ matrix.version }} nginx/ --build-arg NGINX_MAJOR_VERSION=${{ matrix.version }}
          docker tag baijunyao/nginx:${{ matrix.version }} registry.cn-beijing.aliyuncs.com/baijunyao/nginx:${{ matrix.version }}
          docker push baijunyao/nginx:${{ matrix.version }}
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/nginx:${{ matrix.version }}

  mysql_8_0:
    name: MySQL 8.0
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: MySQL 8.0 local
        run: |
          docker build -f mysql/8.0/Dockerfile.local -t baijunyao/mysql:8.0-local mysql/8.0/
          docker tag baijunyao/mysql:8.0-local registry.cn-beijing.aliyuncs.com/baijunyao/mysql:8.0-local
          docker push baijunyao/mysql:8.0-local
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/mysql:8.0-local
      - name: MySQL 8.0 production
        run: |
          docker build -f mysql/8.0/Dockerfile.production -t baijunyao/mysql:8.0-production mysql/8.0/
          docker tag baijunyao/mysql:8.0-production registry.cn-beijing.aliyuncs.com/baijunyao/mysql:8.0-production
          docker push baijunyao/mysql:8.0-production
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/mysql:8.0-production

  mysql_5_7:
    name: MySQL 5.7
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: MySQL 5.7 local
        run: |
          docker build -f mysql/5.7/Dockerfile.local -t baijunyao/mysql:5.7-local mysql/5.7/
          docker tag baijunyao/mysql:5.7-local registry.cn-beijing.aliyuncs.com/baijunyao/mysql:5.7-local
          docker push baijunyao/mysql:5.7-local
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/mysql:5.7-local
      - name: MySQL 5.7 production
        run: |
          docker build -f mysql/5.7/Dockerfile.production -t baijunyao/mysql:5.7-production mysql/5.7/
          docker tag baijunyao/mysql:5.7-production registry.cn-beijing.aliyuncs.com/baijunyao/mysql:5.7-production
          docker push baijunyao/mysql:5.7-production
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/mysql:5.7-production

  mysql_5_6:
    name: MySQL 5.6
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: MySQL 5.6 local
        run: |
          docker build -f mysql/5.6/Dockerfile.local -t baijunyao/mysql:5.6-local mysql/5.6/
          docker tag baijunyao/mysql:5.6-local registry.cn-beijing.aliyuncs.com/baijunyao/mysql:5.6-local
          docker push baijunyao/mysql:5.6-local
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/mysql:5.6-local
      - name: MySQL 5.6 production
        run: |
          docker build -f mysql/5.6/Dockerfile.production -t baijunyao/mysql:5.6-production mysql/5.6/
          docker tag baijunyao/mysql:5.6-production registry.cn-beijing.aliyuncs.com/baijunyao/mysql:5.6-production
          docker push baijunyao/mysql:5.6-production
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/mysql:5.6-production

  php:
    strategy:
      matrix:
        version: [ "7.1", "7.2", "7.3", "7.4", "8.0", "8.1", "8.2", "8.3", "8.4" ]
        mod: [ fpm, cli ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: PHP ${{ matrix.version }}-${{ matrix.mod }} local
        run: |
          docker build -f php/Dockerfile -t baijunyao/php:${{ matrix.version }}-${{ matrix.mod }}-local php/ --build-arg PHP_MAJOR_VERSION=${{ matrix.version }} --build-arg PHP_MOD=${{ matrix.mod }} --target local
          docker tag baijunyao/php:${{ matrix.version }}-${{ matrix.mod }}-local registry.cn-beijing.aliyuncs.com/baijunyao/php:${{ matrix.version }}-${{ matrix.mod }}-local
          docker push baijunyao/php:${{ matrix.version }}-${{ matrix.mod }}-local
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/php:${{ matrix.version }}-${{ matrix.mod }}-local
      - name: PHP ${{ matrix.version }}-${{ matrix.mod }} production
        run: |
          docker build -f php/Dockerfile -t baijunyao/php:${{ matrix.version }}-${{ matrix.mod }}-production php/ --build-arg PHP_MAJOR_VERSION=${{ matrix.version }} --build-arg PHP_MOD=${{ matrix.mod }} --target production
          docker tag baijunyao/php:${{ matrix.version }}-${{ matrix.mod }}-production registry.cn-beijing.aliyuncs.com/baijunyao/php:${{ matrix.version }}-${{ matrix.mod }}-production
          docker push baijunyao/php:${{ matrix.version }}-${{ matrix.mod }}-production
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/php:${{ matrix.version }}-${{ matrix.mod }}-production

  php_nginx:
    name: PHP with NGINX
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: PHP with NGINX
        run: |
          docker build -f php-nginx/Dockerfile -t baijunyao/php-nginx php-nginx/
          docker tag baijunyao/php-nginx registry.cn-beijing.aliyuncs.com/baijunyao/php-nginx
          docker push baijunyao/php-nginx
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/php-nginx

  redis:
    name: Redis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: Redis 6.0
        run: |
          docker build -f redis/6.0/Dockerfile -t baijunyao/redis:6.0 redis/6.0/
          docker tag baijunyao/redis:6.0 registry.cn-beijing.aliyuncs.com/baijunyao/redis:6.0
          docker push baijunyao/redis:6.0
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/redis:6.0

  elasticsearch:
    strategy:
      matrix:
        version: [ "7.4.1", "7.6.2", "7.10.1" ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: Elasticsearch
        run: |
          docker build -f elasticsearch/Dockerfile -t baijunyao/elasticsearch:${{ matrix.version }} elasticsearch/ --build-arg ELASTICSEARCH_VERSION=${{ matrix.version }}
          docker tag baijunyao/elasticsearch:${{ matrix.version }} registry.cn-beijing.aliyuncs.com/baijunyao/elasticsearch:${{ matrix.version }}
          docker push baijunyao/elasticsearch:${{ matrix.version }}
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/elasticsearch:${{ matrix.version }}

  kibana:
    name: Kibana
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: Kibana 7.10.1
        run: |
          docker build -f kibana/7.10.1/Dockerfile -t baijunyao/kibana:7.10.1 kibana/7.10.1/
          docker tag baijunyao/kibana:7.10.1 registry.cn-beijing.aliyuncs.com/baijunyao/kibana:7.10.1
          docker push baijunyao/kibana:7.10.1
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/kibana:7.10.1

  fluentd:
    name: Fluentd
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: Fluentd 1.11
        run: |
          docker build -f fluentd/1.11/Dockerfile -t baijunyao/fluentd:1.11 fluentd/1.11/
          docker tag baijunyao/fluentd:1.11 registry.cn-beijing.aliyuncs.com/baijunyao/fluentd:1.11
          docker push baijunyao/fluentd:1.11
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/fluentd:1.11

  ossutil:
    name: OSSUtil
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: OSSUTIL 1.7.0
        run: |
          docker build -f ossutil/1.7.0/Dockerfile -t baijunyao/ossutil:1.7.0 ossutil/1.7.0/
          docker tag baijunyao/ossutil:1.7.0 registry.cn-beijing.aliyuncs.com/baijunyao/ossutil:1.7.0
          docker push baijunyao/ossutil:1.7.0
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/ossutil:1.7.0

  prometheus:
    name: Prometheus
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: Prometheus v2.23.0
        run: |
          docker build -f prometheus/2.23.0/Dockerfile -t baijunyao/prometheus:v2.23.0 prometheus/2.23.0/
          docker tag baijunyao/prometheus:v2.23.0 registry.cn-beijing.aliyuncs.com/baijunyao/prometheus:v2.23.0
          docker push baijunyao/prometheus:v2.23.0
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/prometheus:v2.23.0

  node_exporter:
    name: Node exporter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: Node exporter v1.1.2
        run: |
          docker build -f node-exporter/1.1.2/Dockerfile -t baijunyao/node-exporter:v1.1.2 node-exporter/1.1.2/
          docker tag baijunyao/node-exporter:v1.1.2 registry.cn-beijing.aliyuncs.com/baijunyao/node-exporter:v1.1.2
          docker push baijunyao/node-exporter:v1.1.2
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/node-exporter:v1.1.2

  grafana:
    name: Grafana
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: baijunyao
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: Grafana 7.3.4
        run: |
          docker build -f grafana/7.3.4/Dockerfile -t baijunyao/grafana:7.3.4 grafana/7.3.4/
          docker tag baijunyao/grafana:7.3.4 registry.cn-beijing.aliyuncs.com/baijunyao/grafana:7.3.4
          docker push baijunyao/grafana:7.3.4
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/grafana:7.3.4

  cert_manager:
    strategy:
      matrix:
        version: [ "1.10.2" ]
        repository: [ "cert-manager-controller", "cert-manager-webhook", "cert-manager-cainjector", "cert-manager-acmesolver", "cert-manager-ctl" ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          login-server: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_CONTAINER_REGISTRY_PASSWORD }}
      - name: ${{ matrix.repository }}-v${{ matrix.version }}
        run: |
          docker pull quay.io/jetstack/${{ matrix.repository }}:v${{ matrix.version }}
          docker tag quay.io/jetstack/${{ matrix.repository }}:v${{ matrix.version }} registry.cn-beijing.aliyuncs.com/baijunyao/${{ matrix.repository }}:v${{ matrix.version }}
          docker push registry.cn-beijing.aliyuncs.com/baijunyao/${{ matrix.repository }}:v${{ matrix.version }}

  notify:
    name: Slack Notify
    runs-on: ubuntu-latest
    needs: [ubuntu_bionic, ubuntu_focal, busybox, alpine, mysql-client, nginx, mysql_8_0, mysql_5_7, mysql_5_6, php, php_nginx, redis, elasticsearch, kibana, fluentd, ossutil, prometheus, node_exporter, grafana, cert_manager]
    if: always()
    steps:
      - name: Slack Notify
        uses: baijunyao/action-slack-notify@v3.0.0
        if: always()
        with:
          slack_channel_id: CMRA2NF3L
          slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN }}
          github_context: ${{ toJson(github) }}
